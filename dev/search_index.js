var documenterSearchIndex = {"docs":
[{"location":"api/#NeighborJoining-Functions","page":"API","title":"NeighborJoining Functions","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [NeighborJoining, NeighborJoining.RegularNeighborJoining, NeighborJoining.FastNeighborJoining]","category":"page"},{"location":"api/#NeighborJoining.NJClust","page":"API","title":"NeighborJoining.NJClust","text":"NJClust(merges::Matrix{M}, heights::Matrix{H})\n\nfields:\n\nmerges is a n-1 x 2 matrix of integers: absolute values of negative integers indicate index into the distance matrix (i.e., leaves). positive integers are the index into the merge list (i.e., the kth internal node)\nheights is an n-1 x 2 matrix where each value is the distance from the left (1) or right (2) chield from its parent. Specifically heights[i,j] is the jth childs distance to the parent node, row i.\n\n\n\n\n\n","category":"type"},{"location":"api/#NeighborJoining.heights-Tuple{NJClust}","page":"API","title":"NeighborJoining.heights","text":"heights(t::NJClust)\n\nextracts the heights list from NJClust object. rowindex is the internal node id, and each column represents the distance from the internal node to it's left and right child respectively.\n\n\n\n\n\n","category":"method"},{"location":"api/#NeighborJoining.merges-Tuple{NJClust}","page":"API","title":"NeighborJoining.merges","text":"merges(t::NJClust)\n\nextracts the merge list from NJClust object. rowindex is the internal node id, and each column represents the children nodes. Leaf nodes are represented by negative integers corresponding to the index in the original distance matrix\n\n\n\n\n\n","category":"method"},{"location":"api/#NeighborJoining.newickstring","page":"API","title":"NeighborJoining.newickstring","text":"newickstring(njc::NJClust, tiplabels=AbstractVector{<:String}; labelinternalnodes=false)\nnewickstring(merges::AbstractArray{<:Integer}, heights::AbstractArray{<:AbstractFloat}, tiplabels::AbstractVector{<:String}; labelinternalnodes=false)\n\nConverts a list of merges into a newicktree formatted string.\n\nargs:\n\nnjc: is a struct that has merges and heights\nmerges and heights from a NJClust struct:\nmerges is a n-1 x 2 matrix of integers: absolute values of negative integers indicate index into the distance matrix (i.e., leaves). positive integers are the index into the merge list (i.e., the kth internal node)\nheights is an n-1 x 2 matrix where each value is the distance from the left (1) or right (2) chield from its parent. Specifically heights[i,j] is the jth childs distance to the parent node, row i.\ntiplabels: vector of string labels corresponding to the order of leaves in the distance matrix\nlabelinternalnodes: whether to generate node labels for the internal nodes. defaults to false.\n\nreturns:\n\nnewicktree formatted string\n\nexample:\n\njulia> d = [\n           0  5  9  9 8\n           5  0 10 10 9\n           9 10  0  8 7\n           9 10  8  0 3\n           8  9  7  3 0\n       ];\n\njulia> njclusts = regNJ(d)\nNJClust{Int64, Float64}([-2 -1; -3 1; -4 2; -5 3], [3.0 2.0; 4.0 3.0; 2.0 2.0; 0.5 0.5])\n\njulia> nwstring = newickstring(njclusts)\n\"(5:5.000000e-01,(4:2.000000e+00,(3:4.000000e+00,(2:3.000000e+00,1:2.000000e+00):3.000000e+00):2.000000e+00):5.000000e-01):0.000000e+00;\"\n\n\n\n\n\n","category":"function"},{"location":"api/#NeighborJoining.order-Tuple{NJClust}","page":"API","title":"NeighborJoining.order","text":"order(clust::NJClust)\n\nReturns the left-to-right order of leaf nodes (tips) in the phylogenetic tree.\n\nPerforms a depth-first traversal of the tree structure to determine the order in which leaf nodes appear when reading the tree from left to right. This is useful for plotting or arranging data according to the tree topology.\n\nArguments\n\nclust::NJClust: A neighbor-joining clustering result containing the tree structure with merges and heights matrices\n\nReturns\n\nVector{Int}: A vector of integers representing the indices of leaf nodes in their left-to-right order in the tree. The indices correspond to the original positions in the distance matrix used to construct the tree.\n\nExample\n\njulia> d = [\n           0  5  9  9 8\n           5  0 10 10 9\n           9 10  0  8 7\n           9 10  8  0 3\n           8  9  7  3 0\n       ];\n\njulia> njclusts = regNJ(d)\nNJClust{Int64, Float64}([-2 -1; -3 1; -4 2; -5 3], [3.0 2.0; 4.0 3.0; 2.0 2.0; 0.5 0.5])\n\njulia> leaf_order = order(njclusts)\n5-element Vector{Int64}:\n 5\n 4\n 3\n 2\n 1\n\n\n\n\n\n","category":"method"},{"location":"api/#NeighborJoining.RegularNeighborJoining.regNJ-Tuple{AbstractMatrix{<:Number}}","page":"API","title":"NeighborJoining.RegularNeighborJoining.regNJ","text":"regNJ(d::AbstractMatrix{<:Number})\n\nregNJ algorithm is the traditional NeighborJoining algorithm from \n\nSaitou, N. & Nei, M. The neighbor-joining method: a new method for reconstructing phylogenetic trees. Molecular Biology and Evolution 4, 406-425 (1987).\n\nThis algorithm is guarenteed to infer the tree for additive distance matrices, but it does have an algorithmic complexity of O(n^3), so it can be slow for distance matrices on the order of >10³.\n\nargs:\n\nd is an n by n square symetric distance matrix\n\nreturns:\n\nNJClust struct with fields merges and heights\n\nexamples:\n\njulia> d = [\n           0  5  9  9 8\n           5  0 10 10 9\n           9 10  0  8 7\n           9 10  8  0 3\n           8  9  7  3 0\n       ];\n\njulia> njclusts = regNJ(d)\nNJClust{Int64, Float64}([-2 -1; -3 1; -4 2; -5 3], [3.0 2.0; 4.0 3.0; 2.0 2.0; 0.5 0.5])\n\njulia> nwstring = newickstring(njclusts)\n\"(5:5.000000e-01,(4:2.000000e+00,(3:4.000000e+00,(2:3.000000e+00,1:2.000000e+00):3.000000e+00):2.000000e+00):5.000000e-01):0.000000e+00;\"\n\n\n\n\n\n","category":"method"},{"location":"api/#NeighborJoining.FastNeighborJoining.fastNJ-Tuple{AbstractMatrix{<:Number}}","page":"API","title":"NeighborJoining.FastNeighborJoining.fastNJ","text":"fastNJ(d::AbstractMatrix{<:Number})\n\nfastNJ algorithm finds k independent pairs to merge and merges them for each iteration.  This is significantly faster because it is not recalculating the full pairwise Q for each pair joined.\n\nThis algorithm is nearly additive, but there are instances where the topology  '(a,(b,(c,d)))' is inferred as '((a,b), (c,d))'. This happens when  'b' is not as close to 'c' or 'd' as it is to 'a',  but 'b' is closer to the common ancestor '(c,d)' than it is to 'a'.\n\nargs:\n\nd is an n by n square symetric distance matrix\n\nreturns:\n\nNJClust struct with fields merges and heights\n\njulia> d = [\n           0  5  9  9 8\n           5  0 10 10 9\n           9 10  0  8 7\n           9 10  8  0 3\n           8  9  7  3 0\n       ];\n\njulia> njclusts = fastNJ(d)\nNJClust{Int64, Float64}([-2 -1; -5 -4; 1 -3; 3 2], [3.0 2.0; 1.0 2.0; 3.0 4.0; 1.0 1.0])\n\njulia> nwstring = newickstring(njclusts)\n\"(5:5.000000e-01,(4:2.000000e+00,(3:4.000000e+00,(2:3.000000e+00,1:2.000000e+00):3.000000e+00):2.000000e+00):5.000000e-01):0.000000e+00;\"\n\n\n\n\n\n","category":"method"},{"location":"api/","page":"API","title":"API","text":"<!– @docs NJClust regNJ fastNJ newickstring –>","category":"page"},{"location":"#NeighborJoining","page":"Home","title":"NeighborJoining","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for NeighborJoining.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package contains algorithms for neighbor joining","category":"page"},{"location":"#What-is-currently-implemented?","page":"Home","title":"What is currently implemented?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"regular Neighborjoining regNJ(): Saitou, N. & Nei, M. The neighbor-joining method: a new method for reconstructing phylogenetic trees. Molecular Biology and Evolution 4, 406-425 (1987).\nfast NeighborJoining fastNJ(): Li, J. F. A fast neighbor joining method. Genet Mol Res 14, 8733–8743 (2015).\nThis is an estimation algorithm and uses heuristics. Thus, it will not always find the exact additive tree, but it should be close ","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"add NeighborJoining","category":"page"},{"location":"#Examples","page":"Home","title":"Examples","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"julia> using NeighborJoining\n\njulia> Dnt_leafnames = [\n           \"Azoto\",\"Ecoli_K12\",\"Mtuberculosis_H37Rv\",\"Xylella_fastidiosa\",\"Xac306\",\"Pseudo\",\"Mbovis_AF2122_97\",\"Xfus4834\",\n       ];\n\njulia> Dnt = [\n           0.0       0.995214  0.985736   0.998027  0.972612  0.970401  0.985776   0.973262\n           0.995214  0.0       0.998149   0.998489  0.995557  0.994368  0.998137   0.995447\n           0.985736  0.998149  0.0        0.998713  0.988001  0.994798  0.0208279  0.987918\n           0.998027  0.998489  0.998713   0.0       0.993199  0.998325  0.998698   0.993084\n           0.972612  0.995557  0.988001   0.993199  0.0       0.986404  0.988083   0.281812\n           0.970401  0.994368  0.994798   0.998325  0.986404  0.0       0.994762   0.987006\n           0.985776  0.998137  0.0208279  0.998698  0.988083  0.994762  0.0        0.987954\n           0.973262  0.995447  0.987918   0.993084  0.281812  0.987006  0.987954   0.0\n       ];\n\njulia> njc = regNJ(Dnt) # or fastNJ(Dnt) if regNJ is too slow\nNJClust{Int64, Float64}([-7 -3; -8 -5; … ; -2 5; -4 6], [0.010421866666666738 0.010406033333333262; 0.1409980999999999 0.1408139000000001; … ; 0.4989758125 0.003104687499999925; 0.24975659374999998 0.24975659374999998])\n\njulia> merges(njc)\n7×2 Matrix{Int64}:\n -7  -3\n -8  -5\n -6  -1\n  2   3\n  1   4\n -2   5\n -4   6\n\njulia> heights(njc)\n7×2 Matrix{Float64}:\n 0.0104219  0.010406\n 0.140998   0.140814\n 0.487981   0.48242\n 0.347904   0.00581042\n 0.485661   0.00314294\n 0.498976   0.00310469\n 0.249757   0.249757\n\njulia> order(njc)\n8-element Vector{Int64}:\n 4\n 2\n 7\n 3\n 8\n 5\n 6\n 1\n\njulia> Dnt_leafnames[order(njc)]\n8-element Vector{String}:\n \"Xylella_fastidiosa\"\n \"Ecoli_K12\"\n \"Mbovis_AF2122_97\"\n \"Mtuberculosis_H37Rv\"\n \"Xfus4834\"\n \"Xac306\"\n \"Pseudo\"\n \"Azoto\"\n\njulia> newickstring(njc, Dnt_leafnames)\n\"(Xylella_fastidiosa:2.497566e-01,(Ecoli_K12:4.989758e-01,((Mbovis_AF2122_97:1.042187e-02,Mtuberculosis_H37Rv:1.040603e-02):4.856611e-01,((Xfus4834:1.409981e-01,Xac306:1.408139e-01):3.479041e-01,(Pseudo:4.879810e-01,Azoto:4.824200e-01):5.810417e-03):3.142937e-03):3.104687e-03):2.497566e-01):0.000000e+00;\"","category":"page"}]
}
